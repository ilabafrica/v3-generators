<?php
function generateTest($conn,$table){
    $test='<?php
namespace Tests\Unit;
/**
* This script is used to generate controllers based on the model structure
* Created by Derrick Rono, Brian Maiyo, Ann Chemutai,
* Emmanuel Kitsao, Winnie Mbaka and Ken Mutuma
* The system is developed by @iLabAfrica Team 
* and is supported by the opensource community.
*/

use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;';
    $describe="describe ".$table;
    $table_structure = mysqli_query($conn, $describe);
    $mockFieldsOriginal="\n";
    $mockFieldsUpdated="\n";
    $rules_set="";
    $modelName = Pluralizer::singular(ucwords(preg_replace_callback('/_([a-z]?)/', function($match) {
            return strtoupper($match[1]);
        }, $table)));
    $test.="\n\n";
    $test.="class ".$modelName."Test extends TestCase\n{\n";
    $test.="\t use DatabaseMigrations;\n\n";
    $test.="
    public function setup(){\n
    \t parent::Setup();\n
    \t $"."this->setVariables();
    }
    ";
    $test.="
    public function setVariables(){\n
    ";
    
    while ($row2 = mysqli_fetch_assoc($table_structure)) {
        //Generate original and update data
        if($row2['Field']=="id" || $row2['Field']=="created_at" || $row2['Field']=="updated_at" || $row2['Field']=="deleted_at"){
            
        }else{            
            if($row2['Type']=='varchar(191)'){
            //generate store objects and exlude id and other autogenerated fields
            $mockFieldsOriginal.="\t\t\t".'"'.$row2['Field'].'"'."=>'Sample String',\n"; 
            $mockFieldsUpdated.="\t\t\t".'"'.$row2['Field'].'"'."=>'Sample updated String',\n";
            }elseif($row2['Type']=='date'){
            //generate store objects and exlude id and other autogenerated fields
            $mockFieldsOriginal.="\t\t\t".'"'.$row2['Field'].'"'."=>'2017:12:12 15:30:00',\n"; 
            $mockFieldsUpdated.="\t\t\t".'"'.$row2['Field'].'"'."=>'2016:12:12 15:30:00',\n";
            }elseif($row2['Type']=='int(10) unsigned'){
               //generate store objects and exlude id and other autogenerated fields
            $mockFieldsOriginal.="\t\t\t".'"'.$row2['Field'].'"'."=>1,\n"; 
            $mockFieldsUpdated.="\t\t\t".'"'.$row2['Field'].'"'."=>1,\n"; 
            }
             
    
        }
    }
    $test.="
    \t$"."this->".strtolower($modelName)."Data=array(
        ".$mockFieldsOriginal."
        );
    ";
    $test.="
    \t$"."this->updated".strtolower($modelName)."Data=array(
        ".$mockFieldsUpdated."
        );
    ";
    //Test Store
    $test.="\n\t}\n\n";
    $test.="\tpublic function testStore".$modelName."()\n\t{\n\t";
    $test.="\t$"."response="."$"."this->json('POST', '/api/".strtolower($modelName)."');\n\t\t";
    $test.="$"."this->assertEquals(200,"."$"."response->getStatusCode());\n\t\t";
    $test.='$this->assertArrayHasKey("subject",$response->original));';
    $test.="\n\t}\n\n";

    //Test lists
    $test.="\tpublic function testList".$modelName."()\n\t{\n\t";
    $test.="\t$"."response="."$"."this->json('GET', '/api/".strtolower($modelName)."');\n\t\t";
    $test.="$"."this->assertEquals(200,"."$"."response->getStatusCode());\n\t\t";
    $test.="\n\t}\n\n";

    //Test show
    
    $test.="\tpublic function testStore".$modelName."()\n\t{\n\t";
    $test.="\t$"."this->json('POST', '/api/".strtolower($modelName)."',$"."this->".strtolower($modelName)."Data);\n\t";
    
    $test.="\t$"."response="."$"."this->json('POST', '/api/".strtolower($modelName)."');\n\t\t";
    $test.="$"."this->assertEquals(200,"."$"."response->getStatusCode());\n\t\t";
    $test.='$this->assertArrayHasKey("subject",$response->original));';
    $test.="\n\t}\n\n";

    //Test Update
    $test.="\tpublic function testUpdate".$modelName."()\n\t{\n\t";
    $test.="\t$"."this->json('POST', '/api/".strtolower($modelName)."',$"."this->updated".strtolower($modelName)."Data);\n\t";
    
    $test.="\t$"."response="."$"."this->json('PUT', '/api/".strtolower($modelName)."');\n\t\t";
    $test.="$"."this->assertEquals(200,"."$"."response->getStatusCode());\n\t\t";
    $test.='$this->assertArrayHasKey("subject",$response->original));';
    $test.="\n\t}\n\n";

    //Test delete
    $test.="\tpublic function testDelete".$modelName."()\n\t{\n\t";
    $test.="\t$"."this->json('POST', '/api/".strtolower($modelName)."',$"."this->".strtolower($modelName)."Data);\n\t";
    $test.="\t$"."response="."$"."this->delete('/api/".strtolower($modelName)."/1');\n\t\t";
    $test.="$"."this->assertEquals(200,"."$"."response->getStatusCode());\n\t\t";
    $test.="\n\t}\n\n";
    $test.="}";

    
    $route="";

    $route.="Route::resource('".strtolower($modelName)."', '".$modelName."Controller');\n";
    generateFile($modelName,$test);
    generateRoutes($route);
}
function generateFile($modelName,$test){
    $myfile = fopen("Tests/".$modelName."Test.php", "w") or die("Unable to open file!");
    fwrite($myfile, $test);
    fclose($myfile);
}
function generateRoutes($test){
    $myfile = fopen("api.php", "a") or die("Unable to open file!");
    fwrite($myfile, $test);
    fclose($myfile);
}