<?php


function generateTest($conn,$table){
    $test="<?php
namespace Tests\Unit;
/**
 * (c) @iLabAfrica
 * BLIS\t\t\t - a port of the Basic Laboratory Information System (BLIS) to Laravel.
 * Team Lead\t - Emmanuel Kweyu.
 * Devs\t\t\t - Brian Maiyo|Ann Chemutai|Winnie Mbaka|Ken Mutuma|Anthony Ereng
 */

use Tests\SetUp;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;";
    $describe="describe ".$table;
    $table_structure = mysqli_query($conn, $describe);
    $mockFieldsOriginal="\n";
    $mockFieldsUpdated="\n";
    $rules_set="";
    $modelName = Pluralizer::singular(ucwords(preg_replace_callback('/_([a-z]?)/', function($match) {
            return strtoupper($match[1]);
        }, $table)));
    $test.="\n\n";
    $test.="class ".$modelName."Test extends TestCase\n{\n";
    $test.="\tuse SetUp;\n";
    $test.="\tuse DatabaseMigrations;\n";
    $test.="\tpublic function setVariables(){\n";
    $subject='';

    while ($row2 = mysqli_fetch_assoc($table_structure)) {
        //Generate original and update data
        if($row2['Field']=="id" || $row2['Field']=="created_at" || $row2['Field']=="updated_at" || $row2['Field']=="deleted_at"){
        }else{
            if($row2['Type']=='date'){
            //generate store objects and exlude id and other autogenerated fields
            $mockFieldsOriginal.="\t\t\t".'"'.$row2['Field'].'"'."=>'2017:12:12 15:30:00',\n"; 
            $mockFieldsUpdated.="\t\t\t".'"'.$row2['Field'].'"'."=>'2016:12:12 15:30:00',\n";
            }elseif($row2['Type']=='int(10) unsigned'){
            //generate store objects and exlude id and other autogenerated fields
            $mockFieldsOriginal.="\t\t\t".'"'.$row2['Field'].'"'."=>1,\n"; 
            $mockFieldsUpdated.="\t\t\t".'"'.$row2['Field'].'"'."=>1,\n"; 
            }else{
            $mockFieldsOriginal.="\t\t\t".'"'.$row2['Field'].'"'."=>'Sample String',\n"; 
            $mockFieldsUpdated.="\t\t\t".'"'.$row2['Field'].'"'."=>'Sample updated String',\n";
            }
            $subject = $row2['Field'];
        }
    }

    $test.="\t\t$"."this->".lcfirst($modelName)."Data=array(".$mockFieldsOriginal."\t\t);\n";
    $test.="\t\t$"."this->updated".$modelName."Data=array(".$mockFieldsUpdated."\t\t);";
    //Test Store
    $test.="\n\t}\n\n";
    $test.="\tpublic function testStore".$modelName."()\n\t{\n\t";
    $test.="\t$"."response="."$"."this->post('/api/".strtolower($modelName)."',";
    $test.="$"."this->".lcfirst($modelName)."Data);\n";

    $test.="\t\t$"."this->assertEquals(200,"."$"."response->getStatusCode());\n";
    $test.="\t\t$"."this->assertArrayHasKey(\"".$subject."\",$"."response->original);\n";
    $test.="\t}\n\n";

    //Test lists
    $test.="\tpublic function testList".$modelName."()\n\t{\n";
    $test.="\t\t$"."response="."$"."this->get('/api/".strtolower($modelName)."');\n";

    $test.="\t\t$"."this->assertEquals(200,"."$"."response->getStatusCode());\n";
    $test.="\t}\n\n";

    //Test show
    
    $test.="\tpublic function testShow".$modelName."()\n\t{\n\t";
    $test.="\t$"."response="."$"."this->post('/api/".strtolower($modelName)."',";
    $test.="$"."this->".lcfirst($modelName)."Data);\n";

    $test.="\t\t$"."response="."$"."this->get('/api/".strtolower($modelName)."/1');\n";

    $test.="\t\t$"."this->assertEquals(200,"."$"."response->getStatusCode());\n";
    $test.="\t\t$"."this->assertArrayHasKey(\"".$subject."\",$"."response->original);\n";
    $test.="\t}\n\n";

    //Test Update
    $test.="\tpublic function testUpdate".$modelName."()\n\t{\n\t";
    $test.="\t$"."response="."$"."this->post('/api/".strtolower($modelName)."',";
    $test.="$"."this->".lcfirst($modelName)."Data);\n";

    $test.="\t\t$"."response="."$"."this->put('/api/".strtolower($modelName)."/1',";
    $test.="$"."this->updated".$modelName."Data);\n";

    $test.="\t\t$"."this->assertEquals(200,"."$"."response->getStatusCode());\n";
    $test.="\t\t$"."this->assertArrayHasKey(\"".$subject."\",$"."response->original);\n";
    $test.="\t}\n\n";

    //Test delete
    $test.="\tpublic function testDelete".$modelName."()\n\t{\n\t";
    $test.="\t$"."response="."$"."this->post('/api/".strtolower($modelName)."',";
    $test.="$"."this->".lcfirst($modelName)."Data);\n";

    $test.="\t\t$"."response="."$"."this->delete('/api/".strtolower($modelName)."/1');\n";

    $test.="\t\t$"."this->assertEquals(200,"."$"."response->getStatusCode());\n";
    $test.="\t}\n\n";
    $test.="}";
    
    $route="";

    $route.="Route::resource('".strtolower($modelName)."', '".$modelName."Controller');\n";
    generateFile($modelName,$test);
    generateRoutes($route);
}
function generateFile($modelName,$test){
    $myfile = fopen("/var/www/Blis-V3/tests/Unit/".$modelName."Test.php", "w") or die("Unable to open file!");
    fwrite($myfile, $test);
    fclose($myfile);
}
function generateRoutes($test){
    $myfile = fopen("api.php", "a") or die("Unable to open file!");
    fwrite($myfile, $test);
    fclose($myfile);
}