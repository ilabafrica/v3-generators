<?php

/**
 * MODELS
 */
$models = [
// "Instrument",
// "Classe",
];


foreach ($models as $key => $value) {
    echo "-------------------------".$value."\tcreated\n";
    //headers
    $model="<?php
namespace App\Models;
/**
 * (c) noahjjo@gmail.com | @aereng@gmail.com
 */

use Illuminate\Database\Eloquent\Model;

class ".$value." extends Model
{
\t//
}";

    $myfile = fopen("/var/www/schmgtsys/app/Models/".$value.".php", "w") or die("Unable to open file!");

    fwrite($myfile, $model);
    fclose($myfile);
}

/**
 * CONTROLLERS
 */
/**
 * Connect to database
 */
$servername = "schmgtsys.local";
$username = "root";
$password = "1234";
$database= "schmgtsys";

// Create connection to db
$conn = new mysqli($servername, $username, $password,$database);

//Get the tables in the DB and loop through each table obtaining the database structure
$query2="show tables";
// Perform Query
$result = mysqli_query($conn, $query2);

$confirmatoryList = [
  // "permission_role",
  // "role_user",
  // "control_results",
  // "control_tests",
  // "control_measure_ranges",
  // "control_measures",
  // "control_types",
  // "lots",
  // "instruments",
  // "patients", 
  // "specimens", 
];

$myfile = fopen("/var/www/schmgtsys/routes/web.php", "a") or die("Unable to open file!");
ftruncate($myfile, 0);
fclose($myfile);


while ($row = mysqli_fetch_assoc($result)) {
    //Generate tests;
    if (!in_array($row["Tables_in_".$database], $confirmatoryList)) {
        continue;
    }
    generateTest($conn,$row["Tables_in_".$database]);
    echo "Test for table ".$row["Tables_in_blis3"]." has been generated\n";
    echo "--------------------------------------------------------------\n";
    getTableStructure($conn,$row["Tables_in_".$database])."\n";
    echo "Controller for table ".$row["Tables_in_blis23"]." has been generated\n";
    echo "--------------------------------------------------------------\n";

}

function getTableStructure($conn,$table){
    //headers
    $controller="<?php

namespace App\Http\Controllers;

/*
 * (c) noahjjo@gmail.com | @aereng@gmail.com
 */

use Illuminate\Http\Request;";
    $Request;
    $describe="describe ".$table;
    $table_structure = mysqli_query($conn, $describe);
    $modelName = Pluralizer::singular(ucwords(preg_replace_callback('/_([a-z]?)/', function($match) {
            return strtoupper($match[1]);
        }, $table)));
    $controller.="
use App\Models\\".$modelName.";\n\n";
    $controller.="class ".$modelName."Controller extends Controller\n{\n";

    //instantiate the index class
    $controller.="    public function index()\n    {\n";
    $controller.="        $".lcfirst($modelName)." = ".$modelName."::orderBy('id', 'ASC')->paginate(20);\n";
    $controller.="        return response()->json($".lcfirst($modelName).");\n";
    $controller.="    }\n";
    //Store function
    $controller.="
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request
     * @return \Illuminate\Http\Response
     */\n";
    $controller.="    public function store(Request $".""."request)\n    {\n";
    $rules_set="\n";
    $update_fields="            $".lcfirst($modelName)." = ".$modelName."::findOrFail($"."id);\n";
    $stored_fields="            $".lcfirst($modelName)." = new ".$modelName.";\n";
        while ($row2 = mysqli_fetch_assoc($table_structure)) {
        $myfile = fopen("/var/www/schmgtsys/app/Http/Controllers/".$modelName."Controller.php", "w") or die("Unable to open file!");
        //$txt = generateController($row2,$modelName);
        //Generate validation rules
        if($row2['Field']=="id" || $row2['Field']=="created_at" || $row2['Field']=="updated_at" || $row2['Field']=="deleted_at"){

        }else{
            if($row2['Null']!='YES'){
                $rules_set.="            ".'\''.$row2['Field'].'\''." => 'required',\n";
            }
             //generate store objects and exlude id and other autogenerated fields
            $stored_fields.="            $".lcfirst($modelName)."->".$row2['Field']." = $"."request->input('".$row2['Field']."');\n";
            $update_fields.="            $".lcfirst($modelName)."->".$row2['Field']." = $"."request->input('".$row2['Field']."');\n";

        }
    }
    $controller.="        $".""."rules = [".$rules_set."        ];\n\n";
    $controller.="        $".""."validator = \\Validator::make($"."request->all(), $"."rules);\n";
    $controller.="        if ($".""."validator->fails()) {\n";
    $controller.="            return response()->json($"."validator);\n        } else {\n";
    $controller.=$stored_fields."\n    ";
    $controller.="        try {\n";
    $controller.="                $".lcfirst($modelName)."->save();\n\n";
    $controller.="                return response()->json($".lcfirst($modelName).");\n";
    $controller.="            } catch (\Illuminate\Database\QueryException $".""."e) {\n";
    $controller.="                return response()->json(['status' => 'error', 'message' => $".""."e->getMessage()]);\n";
    $controller.="            }\n";
    $controller.="        }\n";
    $controller.="    }\n";

    //Show one record function
    $controller.="
    /**
     * Display the specified resource.
     *
     * @param  int  id
     * @return \Illuminate\Http\Response
     */\n";
    $controller.="    public function show($"."id)\n    {";
    $controller.="\n        $".lcfirst($modelName)." = ".$modelName."::findOrFail($"."id);\n\n";
    $controller.="        return response()->json($".lcfirst($modelName).");";
    $controller.="\n    }\n";


    //Update function

    $controller.="
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  request
     * @param  int  id
     * @return \Illuminate\Http\Response
     */\n";
    $controller.="    public function update(Request $"."request, $"."id)\n    {";
    $controller.="\n        $".""."rules = [".$rules_set."        ];\n\n";
    $controller.="        $".""."validator = \\Validator::make($"."request->all(), $"."rules);\n";
    $controller.="        if ($".""."validator->fails()) {\n";
    $controller.="            return response()->json($"."validator, 422);\n        } else {\n";
    $controller.=$update_fields."\n    ";
    $controller.="        try {\n";
    $controller.="                $".lcfirst($modelName)."->save();\n\n";
    $controller.="                return response()->json($".lcfirst($modelName).");\n";
    $controller.="            } catch (\Illuminate\Database\QueryException $".""."e) {\n";
    $controller.="                return response()->json(['status' => 'error', 'message' => $".""."e->getMessage()]);\n";
    $controller.="            }\n";
    $controller.="        }\n";
    $controller.="    }\n";




    //Function to delete item
    $controller.="
    /**
     * Remove the specified resource from storage.
     *
     * @param  int  id
     * @return \Illuminate\Http\Response
     */\n";
    $controller.="    public function destroy($"."id)\n    {";
    $controller.="\n        try {\n";
    $controller.="            $".lcfirst($modelName)." = ".$modelName."::findOrFail($"."id);\n";
    $controller.="            $".lcfirst($modelName)."->delete();\n\n";
    $controller.="            return response()->json($".lcfirst($modelName).", 200);\n";
    $controller.="        } catch (\Illuminate\Database\QueryException $".""."e) {\n";
    $controller.="            return response()->json(['status' => 'error', 'message' => $".""."e->getMessage()]);\n";
    $controller.="        }\n";
    $controller.="    }\n}";


    fwrite($myfile, $controller);
    fclose($myfile);

    $route="";
    $route.="Route::resource('".strtolower($modelName)."', '".$modelName."Controller');\n";
}

/**
 * ROUTES
 */
$myfile = fopen("api.php", "a") or die("Unable to open file!");
fwrite($myfile, $route);
fclose($myfile);